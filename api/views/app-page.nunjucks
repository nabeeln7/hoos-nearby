<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <link rel="stylesheet" href="css/starter-template.css">

    <style type="text/css">
        body {
            padding-top: 5rem;
        }
        .starter-template {
            padding: 3rem 1.5rem;
            text-align: center;
        }
        .my-row {
            border: 3px solid yellow;
        }
        .my-col {
            border: 3px dotted blue;
        }

        #log-display-box {
            border: 1px solid blue;
            height: 400px;
            width: 500px;
            overflow: auto;
            display: block;
        }
    </style>

    <title>Hoos Nearby?</title>
</head>
<body>
<nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">
    <a class="navbar-brand" href="#">Hoos Nearby?</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
</nav>
<main role="main" class="container">
    <div class="starter-template">
        <div class="row">
            <div class="col">
                <h2>{{ name }}</h2>
                app-id: {{ id }}<br/>
            </div>
        </div>

        <div class="row mt-3"></div>

        <div class="row">
            <div class="col">
                <input type="button" onclick="terminateApp('{{ gatewayIp }}', '{{ id }}')" value="Terminate application">
            </div>
        </div>

        <div class="row mt-3"></div>

        <div class="row">
            <div class="col">
                <input type="button" onclick="startLogStreaming('{{ gatewayIp }}', '{{ id }}')" value="Inspect Logs">
            </div>
        </div>

        <div class="row mt-2"></div>

        <div class="row" hidden id="logBoxDiv">
            <div class="col-11" id="log-display-box">
            </div>
            <div class="col-1">
                <button id="auto-scroll-button" onclick="toggleAutoScroll()">Stop autoscroll</button>
            </div>
        </div>

        <div class="row mt-2"></div>

        <div class="row" hidden id="stopLogButtonDiv">
            <div class="col">
                <input type="button" onclick="stopLogStreaming('{{ gatewayIp }}', '{{ id }}')" value="Stop Logging">
            </div>
        </div>

    </div>
</main>

<script>
    let mqtt;
    let autoScrollActive = true; // keeps tracks of whether we are auto scrolling currently
    const logDisplayBox = document.getElementById('log-display-box');
    const autoScrollButton = document.getElementById('auto-scroll-button');

    function toggleAutoScroll() {
        autoScrollActive = !autoScrollActive;
        // set the button text accordingly
        autoScrollButton.innerHTML = autoScrollActive ?  'Stop autoscroll' : 'Start autoscroll';
    }

    // we do auto scroll unless user presses the stop auto scroll button or they scroll up
    // reference: https://stackoverflow.com/a/41202430/445964
    function scrollToBottom() {
        logDisplayBox.scrollTop = logDisplayBox.scrollHeight;
    }

    /**
     * Use the gateway API to terminate a given app
     * @param gatewayIP The IP address of the gateway hosting the app
     * @param appId the id of the app
     */
    async function terminateApp(gatewayIP, appId) {
        const execUrl = `http://${gatewayIP}:5000/gateway/apps/${appId}/terminate`;
        const response = await fetch(execUrl, {method: 'GET'})
            .then(response => response.json());
        if(response.status) {
            alert('App terminated successfully!');
            window.close();
        } else {
            alert(`Error: ${response.error}`);
        }
    }

    /**
     * Use the gateway API to start the log streaming of an app
     * @param gatewayIp
     * @param appId
     */
    async function startLogStreaming(gatewayIp, appId) {
        const execUrl = `http://${gatewayIp}:5000/gateway/apps/${appId}/start-log-streaming`;
        const response = await fetch(execUrl, {method: 'GET'})
            .then(response => response.json());
        if(response.status) {
            // make the stopbutton div and logbox div visible
            document.getElementById('logBoxDiv').hidden = false;
            document.getElementById('stopLogButtonDiv').hidden = false;

            const appLogTopic = response['appLogTopic'];

            scrollToBottom();

            subscribeToMqtt(gatewayIp, appLogTopic, message => {
                const shouldScroll = logDisplayBox.scrollTop + logDisplayBox.clientHeight === logDisplayBox.scrollHeight;

                // append the new message from mqtt to the logDisplayBox div
                const content = document.createTextNode(message.payloadString);
                logDisplayBox.appendChild(content);
                const linebreak = document.createElement("br");
                logDisplayBox.append(linebreak);

                if (autoScrollActive && !shouldScroll) {
                    scrollToBottom();
                }
            });
        } else {
            alert(`Error: ${response.error}`);
        }
    }

    /**
     * Use the gateway API to start the log streaming of an app
     * @param gatewayIp
     * @param appId
     */
    async function stopLogStreaming(gatewayIp, appId) {
        const execUrl = `http://${gatewayIp}:5000/gateway/apps/${appId}/stop-log-streaming`;
        const response = await fetch(execUrl, {method: 'GET'})
            .then(response => response.json());
        if(response.status) {
            alert('Stopped log streaming');
            try {
                mqtt.disconnect();
            } catch (err) {
            }
        } else {
            alert(`Error: ${response.error}`);
        }
    }

    /**
     * Subscribe to MQTT over websocket.
     * @param ip ip address to connect to
     * @param topic mqtt topic
     * @param callback
     */
    function subscribeToMqtt(ip, topic, callback) {
        const port=9001; // the port for MQTT over WS setup in the gateway mosquitto client

        mqtt = new Paho.MQTT.Client(ip,port,"clientjs");
        const options = {
            timeout: 3,
            onSuccess: () => {
                mqtt.subscribe(topic);
            }
        };
        mqtt.onMessageArrived = callback;

        mqtt.connect(options); //connect
    }

</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script>
<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</body>
</html>